services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB__USER}
      POSTGRES_PASSWORD: ${DB__PASS}
      POSTGRES_DB: ${DB__NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB__USER} -d ${DB__NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres # Will only start after postgres has started
    restart: unless-stopped

  redis-tls:
    image: redis:latest
    container_name: redis-with-tls
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis-tls-certs:/etc/redis/certs
    restart: unless-stopped
  
  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "8001:5540"
    volumes:
      - redisinsight_data:/data
    restart: unless-stopped

  app:
    build: . # <-- Tells Docker to find the Dockerfile in the current folder and build the image
    container_name: app
    env_file:
      - .env # <-- Passes all variables from .env into the container with the application
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
    depends_on:
      postgres:
        condition: service_healthy
      redis-tls:
        condition: service_started
    restart: unless-stopped

  worker:
    build: .
    container_name: livetrack_worker
    env_file:
      - .env
    volumes:
      - ./src:/app/src
    # Worker also needs to wait for the database and Redis to be ready
    depends_on:
      postgres:
        condition: service_healthy
      redis-tls:
        condition: service_started
    restart: unless-stopped
    # Key difference: the command it runs
    command: arq src.core.worker.WorkerSettings

  bot:
    build: .
    container_name: livetrack_bot
    env_file:
      - .env
    volumes:
      - ./src:/app/src
    restart: unless-stopped
    command: python -m src.bot


volumes:  
  postgres_data:
  redisinsight_data: